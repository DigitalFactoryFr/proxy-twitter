require("dotenv").config();
const express = require("express");
const axios = require("axios");
const fetch = require("node-fetch");
const cors = require("cors");

const app = express();
const PORT = process.env.PORT || 5000;
const BEARER_TOKEN = process.env.BEARER_TOKEN;
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const GOOGLE_SEARCH_API_KEY = process.env.GOOGLE_SEARCH_TOKEN;
const GOOGLE_SEARCH_CX = process.env.GOOGLE_SEARCH_CX;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// ‚úÖ Configuration CORS
app.use(cors({ origin: "*" }));
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.header("Access-Control-Allow-Headers", "Content-Type, Authorization");
  next();
});

// ‚úÖ V√©rification des variables d'environnement
console.log("üìå V√©rification des variables d'environnement...");
console.log("üîë GOOGLE_SEARCH_TOKEN:", GOOGLE_SEARCH_API_KEY ? "OK" : "NON D√âFINI");
console.log("üîç GOOGLE_SEARCH_CX:", GOOGLE_SEARCH_CX ? "OK" : "NON D√âFINI");
console.log("üê¶ BEARER_TOKEN Twitter:", BEARER_TOKEN ? "OK" : "NON D√âFINI");
console.log("üåç GOOGLE_API_KEY:", GOOGLE_API_KEY ? "OK" : "NON D√âFINI");
console.log("ü§ñ OPENAI_API_KEY:", process.env.OPENAI_API_KEY ? "OK" : "NON D√âFINI");

// ‚úÖ Route principale Twitter
app.get("/twitter/:username", async (req, res) => {
  const username = req.params.username;
  const url = `https://api.twitter.com/2/users/by/username/${username}?user.fields=public_metrics`;

  try {

console.log("üîë Bearer Token utilis√© :", process.env.BEARER_TOKEN);

    const response = await fetch(url, {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${BEARER_TOKEN}`,
        "Content-Type": "application/json"
      }
    });

    const data = await response.json();
    if (data.data) {
      res.json({
        id: data.data.id,
        name: data.data.name,
        username: data.data.username,
        abonn√©s: data.data.public_metrics.followers_count,
      });
    } else {
      res.status(404).json({ error: "Utilisateur non trouv√©" });
    }
  } catch (error) {
    console.error("‚ùå Erreur API Twitter :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});


// ‚úÖ Route pour r√©cup√©rer le Place ID Google
app.get("/api/get-place-id", async (req, res) => {
  const siteInternet = req.query.siteInternet;
  if (!siteInternet) return res.status(400).json({ error: "URL requise" });

  try {
    const placeSearchUrl = `https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${encodeURIComponent(siteInternet)}&inputtype=textquery&fields=name,place_id,formatted_address&key=${GOOGLE_API_KEY}`;
    const response = await fetch(placeSearchUrl);
    const data = await response.json();
    res.json(data);
  } catch (error) {
    console.error("‚ùå Erreur API Google :", error);
    res.status(500).json({ error: "Erreur serveur Google." });
  }
});

// ‚úÖ Route pour r√©cup√©rer les avis Google
app.get("/api/get-reviews", async (req, res) => {
  const placeId = req.query.placeId;
  if (!placeId) return res.status(400).json({ error: "Place ID requis" });

  try {
    const placeDetailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?placeid=${placeId}&fields=name,reviews&key=${GOOGLE_API_KEY}`;
    const response = await fetch(placeDetailsUrl);
    const data = await response.json();
    res.json(data);
  } catch (error) {
    console.error("‚ùå Erreur API Google :", error);
    res.status(500).json({ error: "Erreur serveur Google." });
  }
});

// ‚úÖ Route pour r√©cup√©rer les statistiques compl√®tes de la cha√Æne YouTube
app.get("/youtube-channel-info", async (req, res) => {
    const channelHandle = req.query.channelHandle; // Ex: "@DigitalFactory"
    if (!channelHandle) {
        return res.status(400).json({ error: "Handle de cha√Æne requis (ex: @DigitalFactory)" });
    }

    try {
        console.log(`üîç Recherche des infos pour la cha√Æne YouTube : ${channelHandle}`);

        // 1Ô∏è‚É£ R√©cup√©rer l'ID de la cha√Æne via le handle YouTube
        const handleUrl = `https://www.googleapis.com/youtube/v3/channels?part=id&forHandle=${channelHandle}&key=${GOOGLE_API_KEY}`;
        const handleResponse = await fetch(handleUrl);
        const handleData = await handleResponse.json();

        if (!handleData.items || handleData.items.length === 0) {
            return res.status(404).json({ error: "Aucune cha√Æne trouv√©e pour ce handle." });
        }

        const channelId = handleData.items[0].id;
        console.log(`‚úÖ ID de la cha√Æne trouv√© : ${channelId}`);

        // 2Ô∏è‚É£ R√©cup√©rer les statistiques de la cha√Æne (abonn√©s, vues, vid√©os)
        const statsUrl = `https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${channelId}&key=${GOOGLE_API_KEY}`;
        const statsResponse = await fetch(statsUrl);
        const statsData = await statsResponse.json();

        if (!statsData.items || statsData.items.length === 0) {
            return res.status(404).json({ error: "Impossible de r√©cup√©rer les stats de la cha√Æne." });
        }

        const stats = statsData.items[0].statistics;
        const subscribers = stats.subscriberCount;
        const totalViews = stats.viewCount;
        const totalVideos = stats.videoCount;

        // 3Ô∏è‚É£ R√©cup√©rer la derni√®re vid√©o publi√©e
        const latestVideoUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${channelId}&maxResults=1&order=date&type=video&key=${GOOGLE_API_KEY}`;
        const latestVideoResponse = await fetch(latestVideoUrl);
        const latestVideoData = await latestVideoResponse.json();

        let latestVideo = null;
        if (latestVideoData.items && latestVideoData.items.length > 0) {
            latestVideo = {
                videoId: latestVideoData.items[0].id.videoId,
                title: latestVideoData.items[0].snippet.title,
                thumbnail: latestVideoData.items[0].snippet.thumbnails.medium.url,
                url: `https://www.youtube.com/watch?v=${latestVideoData.items[0].id.videoId}`
            };
        }

        // 4Ô∏è‚É£ R√©cup√©rer la vid√©o la plus populaire
        const popularVideoUrl = `https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${channelId}&maxResults=1&order=viewCount&type=video&key=${GOOGLE_API_KEY}`;
        const popularVideoResponse = await fetch(popularVideoUrl);
        const popularVideoData = await popularVideoResponse.json();

        let popularVideo = null;
        if (popularVideoData.items && popularVideoData.items.length > 0) {
            popularVideo = {
                videoId: popularVideoData.items[0].id.videoId,
                title: popularVideoData.items[0].snippet.title,
                thumbnail: popularVideoData.items[0].snippet.thumbnails.medium.url,
                url: `https://www.youtube.com/watch?v=${popularVideoData.items[0].id.videoId}`
            };
        }

        // ‚úÖ Retourner toutes les informations en JSON
        res.json({
            channelId,
            subscribers,
            totalViews,
            totalVideos,
            latestVideo,
            popularVideo
        });

    } catch (error) {
        console.error("‚ùå Erreur API YouTube :", error);
        res.status(500).json({ error: "Erreur serveur YouTube." });
    }
});


// ‚úÖ Route pour r√©cup√©rer des informations sur l'entreprise avec Google Custom Search et OpenAI

app.get("/api/company-info", async (req, res) => {
    const siteInternet = req.query.siteInternet;
    
    if (!siteInternet) {
        return res.status(400).json({ error: "Param√®tre 'siteInternet' requis" });
    }

    try {
        console.log(`üîç Recherche d'informations sur : ${siteInternet}`);

        // 1Ô∏è‚É£ üîé Requ√™te Google Custom Search API
        const query = `"${siteInternet}" entreprise OR soci√©t√© OR startup OR industrie OR KPIs OR employ√©s OR effectif OR cr√©ation`;
        const searchUrl = `https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(query)}&key=${GOOGLE_SEARCH_API_KEY}&cx=${GOOGLE_SEARCH_CX}`;

        let searchResults;
        try {
            const response = await axios.get(searchUrl);
            searchResults = response.data.items || [];
        } catch (googleError) {
            console.error("‚ùå Erreur API Google :", googleError.message);
            return res.status(500).json({ error: "Erreur lors de la requ√™te Google." });
        }

        if (!searchResults.length) {
            return res.status(404).json({ error: "Aucune donn√©e trouv√©e sur Google." });
        }

        // ‚úÖ Limiter les r√©sultats √† 2 pour √©viter un prompt trop long
        searchResults = searchResults.slice(0, 2);

        // ‚úÖ Extraire uniquement les informations essentielles des r√©sultats
        const extractedResults = searchResults.map(result => ({
            titre: result.title,
            lien: result.link,
            description: result.snippet // R√©cup√®re seulement la description courte
        }));

        // 2Ô∏è‚É£ üì© Construire le prompt pour OpenAI GPT-4 avec une structure all√©g√©e
        const prompt = `
            Voici un r√©sum√© des r√©sultats de recherche Google sur "${siteInternet}":
            ${JSON.stringify(extractedResults, null, 2)}

     
            - Synth√©tiser les informations cl√©s sous forme d'un r√©sum√© concis.

            ‚ùó Attention : Retournez uniquement un JSON bien structur√© sans texte suppl√©mentaire :
            {
                               "effectif": "Valeur",
                "ann√©e_cr√©ation": "Valeur",
           
                "derni√®res_actualit√©s": [
                    {"titre": "...", "source": "..."},
                    {"titre": "...", "source": "..."}
                ],
        
            }
        `;

        // ‚úÖ V√©rifier la taille du prompt
        console.log(`üîç Taille du prompt envoy√© √† OpenAI : ${prompt.length} caract√®res`);

        if (prompt.length > 8000) {
            return res.status(400).json({ error: "Le prompt est toujours trop long. Nouvelle r√©duction n√©cessaire." });
        }

        // 3Ô∏è‚É£ ‚úÖ V√©rifier que la cl√© OpenAI est bien d√©finie
        if (!OPENAI_API_KEY) {
            return res.status(500).json({ error: "Cl√© OpenAI manquante" });
        }

        // 4Ô∏è‚É£ üöÄ Appel √† OpenAI GPT-4
        try {
            const apiUrl = "https://api.openai.com/v1/chat/completions";

            const aiResponse = await axios.post(apiUrl, {
                model: "gpt-4",
                messages: [{ role: "user", content: prompt }],
                max_tokens: 400 // üîΩ R√©duction √† 400 tokens pour √©viter les d√©passements
            }, {
                headers: {
                    "Authorization": `Bearer ${OPENAI_API_KEY}`,
                    "Content-Type": "application/json"
                },
                timeout: 20000 // ‚è≥ Timeout de 20 secondes
            });

            // ‚úÖ V√©rifier si la r√©ponse contient bien un r√©sultat
            if (!aiResponse.data.choices || aiResponse.data.choices.length === 0) {
                return res.status(500).json({ error: "R√©ponse vide de OpenAI" });
            }

            let responseText = aiResponse.data.choices[0].message.content.trim();

try {
    const finalData = JSON.parse(responseText);
    console.log("‚úÖ R√©sum√© g√©n√©r√© par OpenAI :", finalData);
    res.json(finalData);
} catch (jsonError) {
    console.error("‚ùå Erreur JSON OpenAI :", responseText);
    res.status(500).json({ error: "OpenAI a renvoy√© un format non valide. Voici la r√©ponse brute :", raw: responseText });
}


            console.log("‚úÖ R√©sum√© g√©n√©r√© par OpenAI :", finalData);

            // 5Ô∏è‚É£ üì§ Retourner les informations interpr√©t√©es
            res.json(finalData);

        } catch (openAiError) {
            console.error("‚ùå Erreur API OpenAI :", openAiError.response ? openAiError.response.data : openAiError.message);
            res.status(500).json({ error: "Erreur lors de la requ√™te OpenAI" });
        }

    } catch (error) {
        console.error("‚ùå Erreur inattendue :", error);
        res.status(500).json({ error: "Erreur interne du serveur." });
    }
});



// ‚úÖ Lancer le serveur
app.listen(PORT, "0.0.0.0", () => {
    console.log(`üöÄ Serveur en √©coute sur http://localhost:${PORT}`);
});